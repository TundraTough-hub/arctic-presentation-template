#!/usr/bin/env node\n\n/**\n * Interactive Arctic Background Exporter\n * User-friendly interface with file selection\n */\n\nconst readline = require('readline');\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nclass InteractiveExporter {\n  constructor() {\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n    this.availableSlides = this.discoverSlides();\n  }\n\n  discoverSlides() {\n    const slidesDir = '../slides';\n    const slides = [];\n    \n    if (!fs.existsSync(slidesDir)) {\n      console.log('⚠️  Slides directory not found. Looking for slides...');\n      return [];\n    }\n\n    try {\n      const files = fs.readdirSync(slidesDir);\n      const htmlFiles = files.filter(file => file.endsWith('.html'));\n      \n      htmlFiles.forEach(file => {\n        const name = file.replace('.html', '');\n        let category = 'other';\n        let description = 'Custom slide';\n        \n        if (name.includes('modern')) {\n          category = 'modern';\n          if (name.includes('title')) description = 'Modern title slide';\n          else if (name.includes('data')) description = 'Modern data slide';\n          else if (name.includes('section')) description = 'Modern section divider';\n          else description = 'Modern style slide';\n        } else {\n          category = 'classic';\n          if (name.includes('title')) description = 'Classic title slide';\n          else if (name.includes('section')) description = 'Classic section divider';\n          else if (name.includes('data')) description = 'Classic data slide';\n          else description = 'Classic style slide';\n        }\n        \n        slides.push({\n          file: `slides/${file}`,\n          name: name.replace(/^slide-/, '').replace(/^\\d+-/, ''),\n          displayName: file,\n          category,\n          description,\n          fullPath: path.join(slidesDir, file)\n        });\n      });\n    } catch (error) {\n      console.log('❌ Could not read slides directory:', error.message);\n    }\n    \n    return slides;\n  }\n\n  async start() {\n    console.log('🎬 Arctic Presentation Background Exporter');\n    console.log('==========================================\\n');\n\n    // Check if setup is needed\n    const needsSetup = await this.checkSetup();\n    if (needsSetup) {\n      const runSetup = await this.askYesNo('Setup required. Run setup now? (y/n): ');\n      if (runSetup) {\n        await this.runSetup();\n      } else {\n        console.log('Please run setup first: npm install --legacy-peer-deps');\n        this.exit();\n        return;\n      }\n    }\n\n    // Show discovered slides\n    if (this.availableSlides.length > 0) {\n      console.log(`📁 Found ${this.availableSlides.length} slide files:\\n`);\n      this.availableSlides.forEach((slide, index) => {\n        console.log(`   ${index + 1}. ${slide.displayName} (${slide.description})`);\n      });\n      console.log('');\n    }\n\n    // Show main menu\n    await this.showMainMenu();\n  }\n\n  async checkSetup() {\n    const nodeModulesExists = fs.existsSync('./node_modules');\n    const puppeteerExists = fs.existsSync('./node_modules/puppeteer');\n    \n    return !nodeModulesExists || !puppeteerExists;\n  }\n\n  async runSetup() {\n    console.log('\\n🚀 Running setup...\\n');\n    try {\n      execSync('npm install --legacy-peer-deps', { stdio: 'inherit' });\n      console.log('\\n✅ Setup complete!\\n');\n    } catch (error) {\n      console.log('\\n❌ Setup failed. Please run: npm install --legacy-peer-deps\\n');\n      this.exit();\n      return;\n    }\n  }\n\n  async showMainMenu() {\n    console.log('📋 Export Options:');\n    console.log('==================');\n    console.log('1. Export all backgrounds');\n    console.log('2. Export classic style only');\n    console.log('3. Export modern style only');\n    console.log('4. Select specific slides to export');\n    console.log('5. Quick export (8 seconds, HD)');\n    console.log('6. Premium export (4K, 60fps)');\n    console.log('7. Custom export settings');\n    console.log('8. View existing exports');\n    console.log('9. Help & information');\n    console.log('10. Exit');\n    console.log('');\n\n    const choice = await this.askQuestion('Choose an option (1-10): ');\n    await this.handleMainChoice(choice);\n  }\n\n  async handleMainChoice(choice) {\n    switch (choice.trim()) {\n      case '1':\n        await this.exportAll();\n        break;\n      case '2':\n        await this.exportClassic();\n        break;\n      case '3':\n        await this.exportModern();\n        break;\n      case '4':\n        await this.selectSpecificSlides();\n        break;\n      case '5':\n        await this.exportQuick();\n        break;\n      case '6':\n        await this.exportPremium();\n        break;\n      case '7':\n        await this.customExport();\n        break;\n      case '8':\n        await this.viewExports();\n        break;\n      case '9':\n        await this.showHelp();\n        break;\n      case '10':\n        this.exit();\n        return;\n      default:\n        console.log('Invalid choice. Please try again.\\n');\n        await this.showMainMenu();\n    }\n  }\n\n  async selectSpecificSlides() {\n    if (this.availableSlides.length === 0) {\n      console.log('\\n❌ No slide files found in ../slides/ directory.');\n      console.log('Please ensure your slide HTML files are in the slides folder.\\n');\n      await this.showContinueMenu();\n      return;\n    }\n\n    console.log('\\n📁 Select Specific Slides to Export');\n    console.log('====================================\\n');\n    \n    console.log('Available slides:');\n    this.availableSlides.forEach((slide, index) => {\n      const emoji = slide.category === 'modern' ? '🏢' : '🎨';\n      console.log(`${index + 1}. ${emoji} ${slide.displayName}`);\n      console.log(`   ${slide.description}`);\n      console.log('');\n    });\n\n    console.log('Selection options:');\n    console.log('• Enter slide numbers (e.g., \"1,3,5\" or \"1 3 5\")');\n    console.log('• Enter ranges (e.g., \"1-3\" for slides 1, 2, 3)');\n    console.log('• Type \"all\" for all slides');\n    console.log('• Type \"classic\" for classic slides only');\n    console.log('• Type \"modern\" for modern slides only');\n    console.log('');\n\n    const selection = await this.askQuestion('Select slides: ');\n    const selectedSlides = this.parseSlideSelection(selection);\n\n    if (selectedSlides.length === 0) {\n      console.log('❌ No valid slides selected.\\n');\n      await this.selectSpecificSlides();\n      return;\n    }\n\n    console.log(`\\n✅ Selected ${selectedSlides.length} slides:`);\n    selectedSlides.forEach(slide => {\n      console.log(`   • ${slide.displayName} (${slide.description})`);\n    });\n    console.log('');\n\n    const confirm = await this.askYesNo('Proceed with export? (y/n): ');\n    if (confirm) {\n      await this.exportSelectedSlides(selectedSlides);\n    }\n\n    await this.showContinueMenu();\n  }\n\n  parseSlideSelection(selection) {\n    const input = selection.toLowerCase().trim();\n    const selectedSlides = [];\n\n    if (input === 'all') {\n      return [...this.availableSlides];\n    }\n\n    if (input === 'classic') {\n      return this.availableSlides.filter(slide => slide.category === 'classic');\n    }\n\n    if (input === 'modern') {\n      return this.availableSlides.filter(slide => slide.category === 'modern');\n    }\n\n    // Parse numbers, ranges, and comma-separated values\n    const parts = input.split(/[,\\s]+/).filter(part => part.length > 0);\n    \n    for (const part of parts) {\n      if (part.includes('-')) {\n        // Handle ranges like \"1-3\"\n        const [start, end] = part.split('-').map(n => parseInt(n));\n        if (!isNaN(start) && !isNaN(end)) {\n          for (let i = start; i <= end; i++) {\n            if (i >= 1 && i <= this.availableSlides.length) {\n              const slide = this.availableSlides[i - 1];\n              if (!selectedSlides.includes(slide)) {\n                selectedSlides.push(slide);\n              }\n            }\n          }\n        }\n      } else {\n        // Handle individual numbers\n        const num = parseInt(part);\n        if (!isNaN(num) && num >= 1 && num <= this.availableSlides.length) {\n          const slide = this.availableSlides[num - 1];\n          if (!selectedSlides.includes(slide)) {\n            selectedSlides.push(slide);\n          }\n        }\n      }\n    }\n\n    return selectedSlides;\n  }\n\n  async exportSelectedSlides(selectedSlides) {\n    console.log('\\n🎬 Exporting selected slides...');\n    console.log(`📊 Processing ${selectedSlides.length} backgrounds`);\n    console.log('⏱️  Estimated time: 2-3 minutes per slide\\n');\n\n    // Create a temporary config file for the selected slides\n    const slideNames = selectedSlides.map(slide => slide.name);\n    const command = this.buildCustomExportCommand(slideNames);\n    \n    await this.runExport(command);\n  }\n\n  buildCustomExportCommand(slideNames = []) {\n    let command = 'node export-animation-accurate.js';\n    \n    // Add slide selection if specified\n    if (slideNames.length > 0) {\n      // For now, we'll filter by name patterns\n      // This is a simplified approach - a full implementation would modify the export script\n      const hasClassic = slideNames.some(name => !name.includes('modern'));\n      const hasModern = slideNames.some(name => name.includes('modern'));\n      \n      if (hasClassic && !hasModern) {\n        command += ' --classic-only';\n      } else if (hasModern && !hasClassic) {\n        command += ' --modern-only';\n      }\n    }\n    \n    return command;\n  }\n\n  async exportAll() {\n    console.log('\\n🎬 Exporting all Arctic backgrounds...');\n    console.log(`This will create ${this.availableSlides.length} video backgrounds`);\n    console.log('Estimated time: 3-5 minutes\\n');\n\n    const confirm = await this.askYesNo('Continue? (y/n): ');\n    if (confirm) {\n      await this.runExport('node export-animation-accurate.js');\n    }\n    \n    await this.showContinueMenu();\n  }\n\n  async exportClassic() {\n    const classicSlides = this.availableSlides.filter(slide => slide.category === 'classic');\n    console.log('\\n🎨 Exporting classic Arctic backgrounds...');\n    console.log(`Found ${classicSlides.length} classic slides`);\n    console.log('Flowing, dynamic backgrounds with organic animations\\n');\n\n    const confirm = await this.askYesNo('Continue? (y/n): ');\n    if (confirm) {\n      await this.runExport('node export-animation-accurate.js --classic-only');\n    }\n\n    await this.showContinueMenu();\n  }\n\n  async exportModern() {\n    const modernSlides = this.availableSlides.filter(slide => slide.category === 'modern');\n    console.log('\\n🏢 Exporting modern Arctic backgrounds...');\n    console.log(`Found ${modernSlides.length} modern slides`);\n    console.log('Clean, minimal backgrounds perfect for corporate presentations\\n');\n\n    const confirm = await this.askYesNo('Continue? (y/n): ');\n    if (confirm) {\n      await this.runExport('node export-animation-accurate.js --modern-only');\n    }\n\n    await this.showContinueMenu();\n  }\n\n  async exportQuick() {\n    console.log('\\n⚡ Quick export settings:');\n    console.log('• 8-second duration');\n    console.log('• HD resolution (1280x720)');\n    console.log('• All available slides');\n    console.log('• Estimated time: 1-2 minutes\\n');\n\n    const confirm = await this.askYesNo('Continue? (y/n): ');\n    if (confirm) {\n      await this.runExport('node export-animation-accurate.js --duration 8 --resolution hd');\n    }\n\n    await this.showContinueMenu();\n  }\n\n  async exportPremium() {\n    console.log('\\n💎 Premium export settings:');\n    console.log('• 4K resolution (3840x2160)');\n    console.log('• Ultra quality');\n    console.log('• 15-second duration');\n    console.log('• 60fps frame rate');\n    console.log('• Large file sizes');\n    console.log('• Estimated time: 10-15 minutes\\n');\n\n    const confirm = await this.askYesNo('Continue? (y/n): ');\n    if (confirm) {\n      await this.runExport('node export-animation-accurate.js --resolution uhd --quality ultra --duration 15 --fps 60');\n    }\n\n    await this.showContinueMenu();\n  }\n\n  async customExport() {\n    console.log('\\n⚙️  Custom Export Options');\n    console.log('=========================\\n');\n\n    // Slide selection\n    console.log('Slide selection:');\n    console.log('1. All slides');\n    console.log('2. Classic slides only');\n    console.log('3. Modern slides only');\n    console.log('4. Select specific slides');\n    \n    const slideChoice = await this.askQuestion('\\nChoose slides (1-4): ');\n    let slideFlag = '';\n    \n    if (slideChoice === '2') slideFlag = '--classic-only';\n    else if (slideChoice === '3') slideFlag = '--modern-only';\n    else if (slideChoice === '4') {\n      console.log('\\n📁 You can select specific slides after choosing other settings.\\n');\n    }\n\n    // Resolution choice\n    console.log('Resolution options:');\n    console.log('1. HD (1280x720) - Fast, smaller files');\n    console.log('2. Full HD (1920x1080) - Recommended');\n    console.log('3. 4K (3840x2160) - Maximum quality');\n    console.log('4. Presentation (1366x768) - Standard displays');\n    \n    const resChoice = await this.askQuestion('\\nChoose resolution (1-4): ');\n    const resolutions = ['hd', 'fhd', 'uhd', 'presentation'];\n    const resolution = resolutions[parseInt(resChoice) - 1] || 'fhd';\n\n    // Quality choice\n    console.log('\\nQuality options:');\n    console.log('1. Low - Fast export');\n    console.log('2. Medium - Balanced');\n    console.log('3. High - Recommended');\n    console.log('4. Ultra - Maximum quality');\n    \n    const qualChoice = await this.askQuestion('\\nChoose quality (1-4): ');\n    const qualities = ['low', 'medium', 'high', 'ultra'];\n    const quality = qualities[parseInt(qualChoice) - 1] || 'high';\n\n    // Duration choice\n    const duration = await this.askQuestion('\\nDuration in seconds (8-30, default 12): ');\n    const durationNum = parseInt(duration) || 12;\n\n    // Frame rate choice\n    console.log('\\nFrame rate options:');\n    console.log('1. 30 fps (standard)');\n    console.log('2. 60 fps (smoother)');\n    \n    const fpsChoice = await this.askQuestion('\\nChoose frame rate (1-2): ');\n    const fps = fpsChoice === '2' ? 60 : 30;\n\n    // Build command\n    let command = `node export-animation-accurate.js --resolution ${resolution} --quality ${quality} --duration ${durationNum} --fps ${fps}`;\n    if (slideFlag) command += ` ${slideFlag}`;\n\n    console.log(`\\n📋 Export command: ${command}\\n`);\n    \n    // If user wanted specific slide selection, handle that now\n    if (slideChoice === '4') {\n      console.log('Now select your specific slides:\\n');\n      await this.selectSpecificSlides();\n      return;\n    }\n    \n    const confirm = await this.askYesNo('Run export with these settings? (y/n): ');\n    \n    if (confirm) {\n      await this.runExport(command);\n    }\n\n    await this.showContinueMenu();\n  }\n\n  async viewExports() {\n    console.log('\\n📁 Checking for existing exports...\\n');\n\n    const exportDirs = [\n      './mp4-backgrounds-accurate',\n      './mp4-backgrounds-complete',\n      './mp4-backgrounds-real',\n      './mp4-backgrounds'\n    ];\n\n    let foundExports = false;\n\n    for (const dir of exportDirs) {\n      if (fs.existsSync(dir)) {\n        foundExports = true;\n        console.log(`✅ Found exports in: ${dir}`);\n        \n        try {\n          const files = fs.readdirSync(dir, { recursive: true })\n            .filter(file => file.endsWith('.mp4') || file.endsWith('.png'));\n          \n          if (files.length > 0) {\n            console.log(`   Files (${files.length}):`);\n            files.slice(0, 10).forEach(file => console.log(`   • ${file}`));\n            if (files.length > 10) console.log(`   ... and ${files.length - 10} more`);\n          }\n        } catch (error) {\n          console.log('   (Could not read directory contents)');\n        }\n        console.log('');\n      }\n    }\n\n    if (!foundExports) {\n      console.log('❌ No exports found. Run an export first.\\n');\n    }\n\n    await this.showContinueMenu();\n  }\n\n  async showHelp() {\n    console.log('\\n📖 Arctic Background Exporter Help');\n    console.log('===================================\\n');\n    \n    console.log('🎯 What this does:');\n    console.log('• Converts Arctic slide animations to MP4 video backgrounds');\n    console.log('• Creates files you can use in PowerPoint, Google Slides, etc.');\n    console.log('• Exports both classic (flowing) and modern (minimal) styles\\n');\n\n    console.log('📊 Background types:');\n    console.log('• Title slides - For presentation openings');\n    console.log('• Section dividers - For transitions between sections');\n    console.log('• Data slides - For charts, graphs, and statistics\\n');\n\n    console.log('🎛️ Selection features:');\n    console.log('• Export all slides or choose specific ones');\n    console.log('• Filter by style (classic vs modern)');\n    console.log('• Multiple selection formats (numbers, ranges, keywords)\\n');\n\n    console.log('💡 Usage tips:');\n    console.log('• Start with \"Export all backgrounds\" for complete set');\n    console.log('• Use \"Select specific slides\" to export only what you need');\n    console.log('• Classic style: Dynamic, engaging presentations');\n    console.log('• Modern style: Corporate, professional presentations\\n');\n\n    console.log('🔧 System requirements:');\n    console.log('• Node.js 16 or higher');\n    console.log('• 2GB+ RAM for video processing');\n    console.log('• 1GB+ free disk space\\n');\n\n    console.log('📞 Need more help?');\n    console.log('• Check README.md for detailed documentation');\n    console.log('• Visit: https://github.com/TundraTough-hub/arctic-presentation-template');\n    console.log('• Create an issue for problems or questions\\n');\n\n    await this.showContinueMenu();\n  }\n\n  async runExport(command) {\n    console.log('\\n🎬 Starting export...\\n');\n    console.log('═'.repeat(50));\n    \n    try {\n      execSync(command, { stdio: 'inherit' });\n      console.log('\\n═'.repeat(50));\n      console.log('✅ Export completed successfully!\\n');\n      \n      // Show where files were saved\n      const outputDirs = ['./mp4-backgrounds-accurate', './mp4-backgrounds-complete'];\n      for (const dir of outputDirs) {\n        if (fs.existsSync(dir)) {\n          console.log(`📁 Files saved to: ${path.resolve(dir)}`);\n        }\n      }\n      \n    } catch (error) {\n      console.log('\\n═'.repeat(50));\n      console.log('❌ Export failed!\\n');\n      console.log('Common solutions:');\n      console.log('• Ensure dependencies are installed: npm install --legacy-peer-deps');\n      console.log('• Check available disk space');\n      console.log('• Try a smaller resolution or duration');\n      console.log('• Verify slide files exist in ../slides/ folder');\n      console.log('• Check the error message above for specific issues\\n');\n    }\n  }\n\n  async showContinueMenu() {\n    console.log('📋 What would you like to do next?');\n    console.log('1. Return to main menu');\n    console.log('2. View exports');\n    console.log('3. Exit');\n    console.log('');\n\n    const choice = await this.askQuestion('Choose option (1-3): ');\n    \n    switch (choice.trim()) {\n      case '1':\n        await this.showMainMenu();\n        break;\n      case '2':\n        await this.viewExports();\n        break;\n      case '3':\n      default:\n        this.exit();\n        break;\n    }\n  }\n\n  async askQuestion(question) {\n    return new Promise((resolve) => {\n      this.rl.question(question, (answer) => {\n        resolve(answer);\n      });\n    });\n  }\n\n  async askYesNo(question) {\n    const answer = await this.askQuestion(question);\n    return answer.toLowerCase().startsWith('y');\n  }\n\n  exit() {\n    console.log('\\n👋 Thanks for using Arctic Background Exporter!');\n    console.log('🎨 Your exported backgrounds are ready for PowerPoint, Google Slides, and more.\\n');\n    this.rl.close();\n  }\n}\n\n// ASCII art banner function\nfunction showBanner() {\n  console.log('');\n  console.log('   ❄️  ARCTIC PRESENTATION BACKGROUNDS  ❄️');\n  console.log('  ╔══════════════════════════════════════╗');\n  console.log('  ║       Professional Video Export       ║');\n  console.log('  ║     File Selection & Custom Export    ║');\n  console.log('  ╚══════════════════════════════════════╝');\n  console.log('');\n}\n\n// Run the interactive exporter\nif (require.main === module) {\n  showBanner();\n  const exporter = new InteractiveExporter();\n  exporter.start().catch(console.error);\n}\n\nmodule.exports = InteractiveExporter;"